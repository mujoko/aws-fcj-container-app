name: app-cicd

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1                  # change as needed
  AWS_ACCOUNT_ID: "111122223333"              # your account
  ECR_REPO: myapp                             # ECR repo name
  IMAGE_TAG: ${{ github.sha }}
  ECS_CLUSTER: my-ecs-cluster
  ECS_SERVICE_STAGING: myapp-staging
  ECS_SERVICE_PROD: myapp-prod
  TASK_DEF_FAMILY: myapp-taskdef              # existing family
  CONTAINER_NAME: myapp

permissions:
  id-token: write      # for OIDC
  contents: read

jobs:
  build_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Unit tests
        run: npm test -- --ci

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GHAOIDCDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG

      - name: Export image URI
        id: img
        run: echo "uri=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render task definition with new image
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render
        with:
          task-definition-family: ${{ env.TASK_DEF_FAMILY }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.img.outputs.uri }}

      - name: Upload rendered taskdef
        uses: actions/upload-artifact@v4
        with:
          name: taskdef
          path: ${{ steps.render.outputs.task-definition }}

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_test
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: taskdef

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GHAOIDCDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy ECS (staging)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: taskdef.json
          service: ${{ env.ECS_SERVICE_STAGING }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment: production   # ⛔️ requires manual approval if env protection is enabled
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: taskdef

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GHAOIDCDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy ECS (prod)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: taskdef.json
          service: ${{ env.ECS_SERVICE_PROD }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
